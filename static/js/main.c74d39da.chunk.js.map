{"version":3,"sources":["actions/listActions.js","actions/cardsActions.js","actions/index.js","reducers/listsReducer.js","reducers/index.js","store/index.js","components/KanbanCard/KanbanCard.js","components/ActionButton/ActionButton.js","components/KanbanList/KanbanList.js","App.js","serviceWorker.js","index.js"],"names":["addList","title","type","CONSTANTS","ADD_LIST","payload","sort","droppableIdStart","droppableIdEnd","droppableIndexStart","droppableIndexEnd","draggableId","DRAG_HAPPENED","addCard","listID","text","ADD_CARD","cardID","initialState","id","cards","listsReducer","state","action","newList","newCard","newState","map","list","splice","find","card","listStart","listEnd","combineReducers","lists","store","createStore","rootReducer","KanbanCard","index","String","provided","className","ref","innerRef","draggableProps","dragHandleProps","Card","CardContent","Typography","gutterBottom","ActionButton","formOpen","openForm","setState","closeForm","e","handleInputChange","target","value","handleAddList","dispatch","props","handleAddCard","renderAddButton","buttonType","buttonText","onClick","Icon","renderForm","placeholderText","buttonTitle","placeholder","autoFocus","onBlur","onChange","Button","onMouseDown","variant","style","color","backgroundColor","this","React","Component","connect","KanbanList","droppableId","droppableProps","key","App","onDragEnd","result","destination","source","direction","draggablePros","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c74d39da.chunk.js","sourcesContent":["\r\nimport { CONSTANTS } from \"../actions\"\r\n\r\nexport const addList = title => {\r\n    return {\r\n        type: CONSTANTS.ADD_LIST,\r\n        payload: title\r\n    }\r\n}\r\n\r\nexport const sort = (\r\n    droppableIdStart,\r\n    droppableIdEnd,\r\n    droppableIndexStart,\r\n    droppableIndexEnd, \r\n    draggableId,\r\n    type\r\n) => {\r\n    return {\r\n        type: CONSTANTS.DRAG_HAPPENED,\r\n        payload: {\r\n            droppableIdStart,\r\n            droppableIdEnd,\r\n            droppableIndexStart,\r\n            droppableIndexEnd,\r\n            draggableId,\r\n            type\r\n        }\r\n    }\r\n}\r\n\r\n","\r\nimport { CONSTANTS } from \"../actions\"\r\n\r\nexport const addCard = ( listID, text ) => {\r\n    return {\r\n        type: CONSTANTS.ADD_CARD,\r\n        payload: { text, listID }\r\n    }\r\n}\r\n","export * from \"./listActions\"\r\nexport * from \"./cardsActions\"\r\n\r\nexport const CONSTANTS = {\r\n    ADD_CARD: \"ADD_CARD\",\r\n    ADD_LIST: \"ADD_LIST\",\r\n    DRAG_HAPPENED: \"DRAG_HAPPENED\" \r\n}","import { CONSTANTS } from \"../actions\"\r\n\r\nlet listID = 3\r\nlet cardID = 7\r\n\r\nconst initialState = [\r\n    {\r\n        title: \"To Do\",\r\n        id: `list-${0}`,\r\n        cards: [\r\n            {\r\n                id: `card-${0}`,\r\n                text: \"Lorem Ipsum\"\r\n            },\r\n            {\r\n                id: `card-${1}`,\r\n                text: \"Test\"\r\n            },\r\n            {\r\n                id: `card-${2}`,\r\n                text: \"Hello\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"In Progress\",\r\n        id: `list-${1}`,\r\n        cards: [\r\n            {\r\n                id: `card-${3}`,\r\n                text: \"Lorem Ipsum\"\r\n            },\r\n            {\r\n                id: `card-${4}`,\r\n                text: \"Test\"\r\n            }\r\n        ]\r\n    },\r\n    {\r\n        title: \"Completed\",\r\n        id: `list-${2}`,\r\n        cards: [\r\n            {\r\n                id: `card-${5}`,\r\n                text: \"Lorem Ipsum\"\r\n            },\r\n            {\r\n                id: `card-${6}`,\r\n                text: \"Test\"\r\n            }\r\n        ]\r\n    }\r\n]\r\n\r\nconst listsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_LIST:\r\n            const newList = {\r\n                title: action.payload,\r\n                id: `list-${listID}`,\r\n                cards: []\r\n            }\r\n            listID += 1\r\n            return [...state, newList]\r\n        case CONSTANTS.ADD_CARD: {\r\n            const newCard = {\r\n                text: action.payload.text,\r\n                id: `card-${cardID}`\r\n            }\r\n            cardID += 1\r\n\r\n            const newState = state.map(list => {\r\n                if (list.id === action.payload.listID) {\r\n                    return {\r\n                        ...list,\r\n                        cards: [...list.cards, newCard]\r\n                    }\r\n                } else {\r\n                    return list\r\n                }\r\n            })\r\n\r\n            return newState\r\n        }\r\n        \r\n        case CONSTANTS.DRAG_HAPPENED:\r\n            const {\r\n                droppableIdStart,\r\n                droppableIdEnd,\r\n                droppableIndexStart,\r\n                droppableIndexEnd,\r\n                draggableId,\r\n                type\r\n            } = action.payload\r\n            const newState = [...state]\r\n\r\n            // Dragging lists\r\n            if(type === \"list\") {\r\n                const list = newState.splice(droppableIndexStart, 1)\r\n                newState.splice(droppableIndexEnd, 0, ...list)\r\n                return newState\r\n            }\r\n\r\n            // In the same list\r\n            if(droppableIdStart === droppableIdEnd) {\r\n                const list = state.find(list => droppableIdStart === list.id)\r\n                const card = list.cards.splice(droppableIndexStart, 1)\r\n                list.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n\r\n            // Different list\r\n            if (droppableIdStart !== droppableIdEnd) {\r\n                // find the list where the drag started\r\n                const listStart = state.find(list => droppableIdStart === list.id)\r\n\r\n                // pull out the card from the list\r\n                const card = listStart.cards.splice(droppableIndexStart, 1)\r\n\r\n                // find the list where the drag ended\r\n                const listEnd = state.find(list => droppableIdEnd === list.id)\r\n\r\n                // put the card in the new list\r\n                listEnd.cards.splice(droppableIndexEnd, 0, ...card)\r\n            }\r\n\r\n            return newState\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport default listsReducer","import { combineReducers } from 'redux'\r\nimport listsReducer from './listsReducer'\r\n\r\nexport default combineReducers({\r\n    lists: listsReducer\r\n})","import { createStore } from 'redux'\r\nimport rootReducer from '../reducers'\r\n\r\nconst store = createStore(rootReducer)\r\n\r\nexport default store","import React from 'react'\r\n\r\nimport Card from '@material-ui/core/Card'\r\nimport CardContent from '@material-ui/core/CardContent'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport { Draggable } from 'react-beautiful-dnd'\r\n\r\nimport './KanbanCard.sass'\r\n\r\nconst KanbanCard = ({ text, id, index }) => {\r\n    return (\r\n        <Draggable draggableId={String(id)} index={index}>\r\n            {provided => (\r\n                <div className=\"card-container\"\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps} \r\n                    {...provided.dragHandleProps}\r\n                >\r\n                    <Card className=\"card\">\r\n                        <CardContent>\r\n                            <Typography gutterBottom>{text}</Typography>\r\n                        </CardContent>\r\n                    </Card>\r\n                </div>\r\n            )}\r\n            \r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default KanbanCard","import React from 'react'\r\nimport Textarea from 'react-textarea-autosize'\r\n\r\nimport \"./ActionButton.sass\"\r\nimport Card from '@material-ui/core/Card'\r\nimport Button from '@material-ui/core/Button'\r\nimport Icon from '@material-ui/core/Icon';\r\n\r\nimport { connect } from \"react-redux\"\r\nimport { addList, addCard } from \"../../actions\"\r\n\r\n\r\nclass ActionButton extends React.Component {\r\n\r\n    state = {\r\n        formOpen: false,\r\n        text: \"\"\r\n    }\r\n\r\n    openForm = () => { \r\n        this.setState({\r\n            formOpen: true\r\n        })\r\n    }\r\n\r\n    closeForm = (e) => {\r\n        this.setState({\r\n            formOpen: false\r\n        })\r\n    }\r\n\r\n    handleInputChange = e => {\r\n        this.setState({\r\n            text: e.target.value\r\n        })\r\n    }\r\n\r\n    handleAddList = () => {\r\n        const { dispatch } = this.props\r\n        const { text } = this.state\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: \"\"\r\n            })\r\n            dispatch(addList(text))\r\n        }\r\n\r\n        return\r\n    }\r\n\r\n    handleAddCard = () => {\r\n        const { dispatch, listID } = this.props\r\n        const { text } = this.state\r\n\r\n        if (text) {\r\n            this.setState({\r\n                text: \"\"\r\n            })\r\n            dispatch(addCard(listID, text))\r\n        }\r\n    }\r\n\r\n    renderAddButton = () => {\r\n        const { list } = this.props\r\n\r\n        const buttonType = list ? \"list-button action\" : \"card-button action\"\r\n        const buttonText = list ? \"Add another list\" : \"Add another card\"\r\n    \r\n\r\n        return (\r\n            <div onClick = {this.openForm} className={buttonType}>\r\n                <Icon className=\"add\">add</Icon>\r\n                <p>{buttonText}</p>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    renderForm = () => {\r\n\r\n        const { list } = this.props\r\n        const placeholderText = list \r\n        ? \"Enter list title...\"\r\n        : \"Enter a title for this card...\"\r\n\r\n        const buttonTitle = list\r\n        ? \"Add List\"\r\n        : \"Add Card\"\r\n\r\n        return (\r\n            <div>\r\n            <Card className=\"form-card\">\r\n                <Textarea\r\n                className=\"form-textarea\" \r\n                placeholder={placeholderText}\r\n                autoFocus\r\n                onBlur={this.closeForm}\r\n                value={this.state.text}\r\n                onChange={this.handleInputChange} />\r\n            </Card>\r\n            <div className=\"button-group\">\r\n                <Button onMouseDown={ list ? this.handleAddList : this.handleAddCard } variant=\"contained\" className=\"add-button\"style={{\r\n                    color: \"white\",\r\n                    backgroundColor: \"#5AAC44\"\r\n                }}>{buttonTitle}</Button>\r\n                <Icon className=\"close\">close</Icon>\r\n            </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    render() {\r\n        return this.state.formOpen ? this.renderForm() :  this.renderAddButton()\r\n    }\r\n}\r\n\r\nexport default connect()(ActionButton);","import React from 'react'\r\nimport { Droppable, Draggable } from 'react-beautiful-dnd'\r\n\r\nimport KanbanCard from '../KanbanCard/KanbanCard.js'\r\nimport ActionButton from '../ActionButton/ActionButton.js'\r\n\r\nimport \"./KanbanList.sass\"\r\n\r\n\r\nconst KanbanList = ({ title, cards, listID, index }) => {\r\n    return (\r\n        <Draggable draggableId={String(listID)} index={index}>\r\n            {provided => (\r\n                <div className=\"list-container\"\r\n                {...provided.draggableProps} \r\n                ref={provided.innerRef} \r\n                {...provided.dragHandleProps}\r\n                >\r\n                <Droppable droppableId={String(listID)}>\r\n                {provided => (\r\n                    <div {...provided.droppableProps} ref={provided.innerRef} >\r\n                        <h3>{title}</h3>\r\n                        { cards.map((card, index) => ( \r\n                            <KanbanCard key={card.id} index={index} text={card.text} id={card.id} />\r\n                        ))}\r\n                        {provided.placeholder}\r\n                        <ActionButton listID={listID} />\r\n                    </div>\r\n                )}\r\n                \r\n                </Droppable>\r\n             </div>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default KanbanList","import React, { Component } from 'react'\nimport KanbanList from './components/KanbanList/KanbanList.js'\nimport { connect } from 'react-redux'\nimport ActionButton from \"./components/ActionButton/ActionButton.js\"\nimport { DragDropContext, Droppable } from \"react-beautiful-dnd\"\nimport { sort } from \"./actions\"\n\nimport \"./App.sass\"\n\nclass App extends Component {\n  onDragEnd = (result) => {\n    const { destination, source, draggableId, type } = result\n\n    if(!destination) {\n      return\n    }\n\n    this.props.dispatch(sort(\n      source.droppableId,\n      destination.droppableId,\n      source.index,\n      destination.index,\n      draggableId,\n      type\n    ))\n\n\n  }\n\n  render() {\n\n    const { lists } = this.props\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        <div className=\"App\">\n          <div className=\"wrapper\">\n            <h2>Kanban board</h2>\n            <Droppable droppableId=\"all-lists\" direction=\"horizontal\" type=\"list\">\n              {provided => (\n                <div className=\"lists-container\" {...provided.draggablePros} ref={provided.innerRef}>\n                { lists.map((list, index) => (\n                  <KanbanList \n                  key={list.id}\n                  listID = {list.id}\n                  title={list.title}\n                  cards={list.cards}\n                  index={index} />)\n                )}\n                {provided.placeholder}\n                <ActionButton list />\n              </div>\n              )}\n            </Droppable>\n            \n          </div>\n        </div>\n      </DragDropContext>\n    )\n  }\n\n}\n\nconst mapStateToProps = state => ({\n  lists: state.lists\n})\n\nexport default connect(mapStateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux'\n\nimport store from \"./store\"\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}